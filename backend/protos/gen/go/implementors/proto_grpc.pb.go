// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: implementors/proto.proto

package implementors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImplementorsProvider_Create_FullMethodName = "/implementors_provider.ImplementorsProvider/Create"
	ImplementorsProvider_Get_FullMethodName    = "/implementors_provider.ImplementorsProvider/Get"
	ImplementorsProvider_Update_FullMethodName = "/implementors_provider.ImplementorsProvider/Update"
	ImplementorsProvider_Delete_FullMethodName = "/implementors_provider.ImplementorsProvider/Delete"
	ImplementorsProvider_List_FullMethodName   = "/implementors_provider.ImplementorsProvider/List"
)

// ImplementorsProviderClient is the client API for ImplementorsProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImplementorsProviderClient interface {
	Create(ctx context.Context, in *CreateImplementorRequest, opts ...grpc.CallOption) (*ImplementorResponse, error)
	Get(ctx context.Context, in *GetImplementorRequest, opts ...grpc.CallOption) (*ImplementorResponse, error)
	Update(ctx context.Context, in *UpdateImplementorRequest, opts ...grpc.CallOption) (*ImplementorResponse, error)
	Delete(ctx context.Context, in *DeleteImplementorRequest, opts ...grpc.CallOption) (*DeleteImplementorResponse, error)
	List(ctx context.Context, in *ListImplementorsRequest, opts ...grpc.CallOption) (*ImplementorsListResponse, error)
}

type implementorsProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewImplementorsProviderClient(cc grpc.ClientConnInterface) ImplementorsProviderClient {
	return &implementorsProviderClient{cc}
}

func (c *implementorsProviderClient) Create(ctx context.Context, in *CreateImplementorRequest, opts ...grpc.CallOption) (*ImplementorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImplementorResponse)
	err := c.cc.Invoke(ctx, ImplementorsProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementorsProviderClient) Get(ctx context.Context, in *GetImplementorRequest, opts ...grpc.CallOption) (*ImplementorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImplementorResponse)
	err := c.cc.Invoke(ctx, ImplementorsProvider_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementorsProviderClient) Update(ctx context.Context, in *UpdateImplementorRequest, opts ...grpc.CallOption) (*ImplementorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImplementorResponse)
	err := c.cc.Invoke(ctx, ImplementorsProvider_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementorsProviderClient) Delete(ctx context.Context, in *DeleteImplementorRequest, opts ...grpc.CallOption) (*DeleteImplementorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteImplementorResponse)
	err := c.cc.Invoke(ctx, ImplementorsProvider_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *implementorsProviderClient) List(ctx context.Context, in *ListImplementorsRequest, opts ...grpc.CallOption) (*ImplementorsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImplementorsListResponse)
	err := c.cc.Invoke(ctx, ImplementorsProvider_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImplementorsProviderServer is the server API for ImplementorsProvider service.
// All implementations must embed UnimplementedImplementorsProviderServer
// for forward compatibility.
type ImplementorsProviderServer interface {
	Create(context.Context, *CreateImplementorRequest) (*ImplementorResponse, error)
	Get(context.Context, *GetImplementorRequest) (*ImplementorResponse, error)
	Update(context.Context, *UpdateImplementorRequest) (*ImplementorResponse, error)
	Delete(context.Context, *DeleteImplementorRequest) (*DeleteImplementorResponse, error)
	List(context.Context, *ListImplementorsRequest) (*ImplementorsListResponse, error)
	mustEmbedUnimplementedImplementorsProviderServer()
}

// UnimplementedImplementorsProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImplementorsProviderServer struct{}

func (UnimplementedImplementorsProviderServer) Create(context.Context, *CreateImplementorRequest) (*ImplementorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedImplementorsProviderServer) Get(context.Context, *GetImplementorRequest) (*ImplementorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedImplementorsProviderServer) Update(context.Context, *UpdateImplementorRequest) (*ImplementorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedImplementorsProviderServer) Delete(context.Context, *DeleteImplementorRequest) (*DeleteImplementorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedImplementorsProviderServer) List(context.Context, *ListImplementorsRequest) (*ImplementorsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedImplementorsProviderServer) mustEmbedUnimplementedImplementorsProviderServer() {}
func (UnimplementedImplementorsProviderServer) testEmbeddedByValue()                              {}

// UnsafeImplementorsProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImplementorsProviderServer will
// result in compilation errors.
type UnsafeImplementorsProviderServer interface {
	mustEmbedUnimplementedImplementorsProviderServer()
}

func RegisterImplementorsProviderServer(s grpc.ServiceRegistrar, srv ImplementorsProviderServer) {
	// If the following call pancis, it indicates UnimplementedImplementorsProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImplementorsProvider_ServiceDesc, srv)
}

func _ImplementorsProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImplementorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementorsProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImplementorsProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementorsProviderServer).Create(ctx, req.(*CreateImplementorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementorsProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImplementorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementorsProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImplementorsProvider_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementorsProviderServer).Get(ctx, req.(*GetImplementorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementorsProvider_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImplementorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementorsProviderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImplementorsProvider_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementorsProviderServer).Update(ctx, req.(*UpdateImplementorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementorsProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImplementorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementorsProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImplementorsProvider_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementorsProviderServer).Delete(ctx, req.(*DeleteImplementorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImplementorsProvider_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImplementorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImplementorsProviderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImplementorsProvider_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImplementorsProviderServer).List(ctx, req.(*ListImplementorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImplementorsProvider_ServiceDesc is the grpc.ServiceDesc for ImplementorsProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImplementorsProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "implementors_provider.ImplementorsProvider",
	HandlerType: (*ImplementorsProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ImplementorsProvider_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ImplementorsProvider_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ImplementorsProvider_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ImplementorsProvider_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ImplementorsProvider_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "implementors/proto.proto",
}
