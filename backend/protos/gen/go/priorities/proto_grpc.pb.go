// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: priorities/proto.proto

package priorities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrioritiesProvider_Create_FullMethodName = "/priorities_provider.PrioritiesProvider/Create"
	PrioritiesProvider_Get_FullMethodName    = "/priorities_provider.PrioritiesProvider/Get"
	PrioritiesProvider_Update_FullMethodName = "/priorities_provider.PrioritiesProvider/Update"
	PrioritiesProvider_Delete_FullMethodName = "/priorities_provider.PrioritiesProvider/Delete"
	PrioritiesProvider_List_FullMethodName   = "/priorities_provider.PrioritiesProvider/List"
)

// PrioritiesProviderClient is the client API for PrioritiesProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrioritiesProviderClient interface {
	Create(ctx context.Context, in *CreatePrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesResponse, error)
	Get(ctx context.Context, in *GetPrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesResponse, error)
	Update(ctx context.Context, in *UpdatePrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesResponse, error)
	Delete(ctx context.Context, in *DeletePrioritiesRequest, opts ...grpc.CallOption) (*DeletePrioritiesResponse, error)
	List(ctx context.Context, in *ListPrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesListResponse, error)
}

type prioritiesProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewPrioritiesProviderClient(cc grpc.ClientConnInterface) PrioritiesProviderClient {
	return &prioritiesProviderClient{cc}
}

func (c *prioritiesProviderClient) Create(ctx context.Context, in *CreatePrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrioritiesResponse)
	err := c.cc.Invoke(ctx, PrioritiesProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesProviderClient) Get(ctx context.Context, in *GetPrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrioritiesResponse)
	err := c.cc.Invoke(ctx, PrioritiesProvider_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesProviderClient) Update(ctx context.Context, in *UpdatePrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrioritiesResponse)
	err := c.cc.Invoke(ctx, PrioritiesProvider_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesProviderClient) Delete(ctx context.Context, in *DeletePrioritiesRequest, opts ...grpc.CallOption) (*DeletePrioritiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrioritiesResponse)
	err := c.cc.Invoke(ctx, PrioritiesProvider_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prioritiesProviderClient) List(ctx context.Context, in *ListPrioritiesRequest, opts ...grpc.CallOption) (*PrioritiesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrioritiesListResponse)
	err := c.cc.Invoke(ctx, PrioritiesProvider_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrioritiesProviderServer is the server API for PrioritiesProvider service.
// All implementations must embed UnimplementedPrioritiesProviderServer
// for forward compatibility.
type PrioritiesProviderServer interface {
	Create(context.Context, *CreatePrioritiesRequest) (*PrioritiesResponse, error)
	Get(context.Context, *GetPrioritiesRequest) (*PrioritiesResponse, error)
	Update(context.Context, *UpdatePrioritiesRequest) (*PrioritiesResponse, error)
	Delete(context.Context, *DeletePrioritiesRequest) (*DeletePrioritiesResponse, error)
	List(context.Context, *ListPrioritiesRequest) (*PrioritiesListResponse, error)
	mustEmbedUnimplementedPrioritiesProviderServer()
}

// UnimplementedPrioritiesProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrioritiesProviderServer struct{}

func (UnimplementedPrioritiesProviderServer) Create(context.Context, *CreatePrioritiesRequest) (*PrioritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPrioritiesProviderServer) Get(context.Context, *GetPrioritiesRequest) (*PrioritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPrioritiesProviderServer) Update(context.Context, *UpdatePrioritiesRequest) (*PrioritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPrioritiesProviderServer) Delete(context.Context, *DeletePrioritiesRequest) (*DeletePrioritiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPrioritiesProviderServer) List(context.Context, *ListPrioritiesRequest) (*PrioritiesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPrioritiesProviderServer) mustEmbedUnimplementedPrioritiesProviderServer() {}
func (UnimplementedPrioritiesProviderServer) testEmbeddedByValue()                            {}

// UnsafePrioritiesProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrioritiesProviderServer will
// result in compilation errors.
type UnsafePrioritiesProviderServer interface {
	mustEmbedUnimplementedPrioritiesProviderServer()
}

func RegisterPrioritiesProviderServer(s grpc.ServiceRegistrar, srv PrioritiesProviderServer) {
	// If the following call pancis, it indicates UnimplementedPrioritiesProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrioritiesProvider_ServiceDesc, srv)
}

func _PrioritiesProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrioritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrioritiesProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesProviderServer).Create(ctx, req.(*CreatePrioritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrioritiesProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrioritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrioritiesProvider_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesProviderServer).Get(ctx, req.(*GetPrioritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrioritiesProvider_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrioritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesProviderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrioritiesProvider_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesProviderServer).Update(ctx, req.(*UpdatePrioritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrioritiesProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrioritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrioritiesProvider_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesProviderServer).Delete(ctx, req.(*DeletePrioritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrioritiesProvider_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrioritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrioritiesProviderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrioritiesProvider_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrioritiesProviderServer).List(ctx, req.(*ListPrioritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrioritiesProvider_ServiceDesc is the grpc.ServiceDesc for PrioritiesProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrioritiesProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "priorities_provider.PrioritiesProvider",
	HandlerType: (*PrioritiesProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PrioritiesProvider_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PrioritiesProvider_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PrioritiesProvider_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PrioritiesProvider_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PrioritiesProvider_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "priorities/proto.proto",
}
