// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: history/proto.proto

package history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HistoryProvider_Create_FullMethodName         = "/history_provider.HistoryProvider/Create"
	HistoryProvider_Get_FullMethodName            = "/history_provider.HistoryProvider/Get"
	HistoryProvider_ListBySentence_FullMethodName = "/history_provider.HistoryProvider/ListBySentence"
)

// HistoryProviderClient is the client API for HistoryProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryProviderClient interface {
	Create(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	Get(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	ListBySentence(ctx context.Context, in *ListBySentenceRequest, opts ...grpc.CallOption) (*HistoryListResponse, error)
}

type historyProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryProviderClient(cc grpc.ClientConnInterface) HistoryProviderClient {
	return &historyProviderClient{cc}
}

func (c *historyProviderClient) Create(ctx context.Context, in *CreateHistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, HistoryProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyProviderClient) Get(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, HistoryProvider_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyProviderClient) ListBySentence(ctx context.Context, in *ListBySentenceRequest, opts ...grpc.CallOption) (*HistoryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryListResponse)
	err := c.cc.Invoke(ctx, HistoryProvider_ListBySentence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HistoryProviderServer is the server API for HistoryProvider service.
// All implementations must embed UnimplementedHistoryProviderServer
// for forward compatibility.
type HistoryProviderServer interface {
	Create(context.Context, *CreateHistoryRequest) (*HistoryResponse, error)
	Get(context.Context, *GetHistoryRequest) (*HistoryResponse, error)
	ListBySentence(context.Context, *ListBySentenceRequest) (*HistoryListResponse, error)
	mustEmbedUnimplementedHistoryProviderServer()
}

// UnimplementedHistoryProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHistoryProviderServer struct{}

func (UnimplementedHistoryProviderServer) Create(context.Context, *CreateHistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedHistoryProviderServer) Get(context.Context, *GetHistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHistoryProviderServer) ListBySentence(context.Context, *ListBySentenceRequest) (*HistoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySentence not implemented")
}
func (UnimplementedHistoryProviderServer) mustEmbedUnimplementedHistoryProviderServer() {}
func (UnimplementedHistoryProviderServer) testEmbeddedByValue()                         {}

// UnsafeHistoryProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryProviderServer will
// result in compilation errors.
type UnsafeHistoryProviderServer interface {
	mustEmbedUnimplementedHistoryProviderServer()
}

func RegisterHistoryProviderServer(s grpc.ServiceRegistrar, srv HistoryProviderServer) {
	// If the following call pancis, it indicates UnimplementedHistoryProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HistoryProvider_ServiceDesc, srv)
}

func _HistoryProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryProviderServer).Create(ctx, req.(*CreateHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryProvider_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryProviderServer).Get(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryProvider_ListBySentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryProviderServer).ListBySentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HistoryProvider_ListBySentence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryProviderServer).ListBySentence(ctx, req.(*ListBySentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HistoryProvider_ServiceDesc is the grpc.ServiceDesc for HistoryProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "history_provider.HistoryProvider",
	HandlerType: (*HistoryProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _HistoryProvider_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HistoryProvider_Get_Handler,
		},
		{
			MethodName: "ListBySentence",
			Handler:    _HistoryProvider_ListBySentence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "history/proto.proto",
}
