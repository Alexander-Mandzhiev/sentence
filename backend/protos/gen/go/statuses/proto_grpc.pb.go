// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: statuses/proto.proto

package statuses

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatusProvider_Create_FullMethodName = "/status_provider.StatusProvider/Create"
	StatusProvider_Get_FullMethodName    = "/status_provider.StatusProvider/Get"
	StatusProvider_Update_FullMethodName = "/status_provider.StatusProvider/Update"
	StatusProvider_Delete_FullMethodName = "/status_provider.StatusProvider/Delete"
	StatusProvider_List_FullMethodName   = "/status_provider.StatusProvider/List"
)

// StatusProviderClient is the client API for StatusProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatusProviderClient interface {
	Create(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Get(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Update(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Delete(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*DeleteStatusResponse, error)
	List(ctx context.Context, in *ListStatusesRequest, opts ...grpc.CallOption) (*StatusListResponse, error)
}

type statusProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewStatusProviderClient(cc grpc.ClientConnInterface) StatusProviderClient {
	return &statusProviderClient{cc}
}

func (c *statusProviderClient) Create(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, StatusProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusProviderClient) Get(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, StatusProvider_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusProviderClient) Update(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, StatusProvider_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusProviderClient) Delete(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*DeleteStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStatusResponse)
	err := c.cc.Invoke(ctx, StatusProvider_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusProviderClient) List(ctx context.Context, in *ListStatusesRequest, opts ...grpc.CallOption) (*StatusListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusListResponse)
	err := c.cc.Invoke(ctx, StatusProvider_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusProviderServer is the server API for StatusProvider service.
// All implementations must embed UnimplementedStatusProviderServer
// for forward compatibility.
type StatusProviderServer interface {
	Create(context.Context, *CreateStatusRequest) (*StatusResponse, error)
	Get(context.Context, *GetStatusRequest) (*StatusResponse, error)
	Update(context.Context, *UpdateStatusRequest) (*StatusResponse, error)
	Delete(context.Context, *DeleteStatusRequest) (*DeleteStatusResponse, error)
	List(context.Context, *ListStatusesRequest) (*StatusListResponse, error)
	mustEmbedUnimplementedStatusProviderServer()
}

// UnimplementedStatusProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatusProviderServer struct{}

func (UnimplementedStatusProviderServer) Create(context.Context, *CreateStatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStatusProviderServer) Get(context.Context, *GetStatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStatusProviderServer) Update(context.Context, *UpdateStatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStatusProviderServer) Delete(context.Context, *DeleteStatusRequest) (*DeleteStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStatusProviderServer) List(context.Context, *ListStatusesRequest) (*StatusListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStatusProviderServer) mustEmbedUnimplementedStatusProviderServer() {}
func (UnimplementedStatusProviderServer) testEmbeddedByValue()                        {}

// UnsafeStatusProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatusProviderServer will
// result in compilation errors.
type UnsafeStatusProviderServer interface {
	mustEmbedUnimplementedStatusProviderServer()
}

func RegisterStatusProviderServer(s grpc.ServiceRegistrar, srv StatusProviderServer) {
	// If the following call pancis, it indicates UnimplementedStatusProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatusProvider_ServiceDesc, srv)
}

func _StatusProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusProviderServer).Create(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusProvider_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusProviderServer).Get(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusProvider_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusProviderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusProvider_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusProviderServer).Update(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusProvider_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusProviderServer).Delete(ctx, req.(*DeleteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusProvider_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusProviderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatusProvider_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusProviderServer).List(ctx, req.(*ListStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatusProvider_ServiceDesc is the grpc.ServiceDesc for StatusProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatusProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "status_provider.StatusProvider",
	HandlerType: (*StatusProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StatusProvider_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StatusProvider_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StatusProvider_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StatusProvider_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StatusProvider_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statuses/proto.proto",
}
