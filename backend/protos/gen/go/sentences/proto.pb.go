// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.1
// source: sentences/proto.proto

package sentences

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSentenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusId      int32                  `protobuf:"varint,1,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`                // ID статуса (обязательное)
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                         // Имя пользователя (обязательное)
	Phone         string                 `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`                                       // Телефон пользователя (необязательное)
	DepartmentId  int32                  `protobuf:"varint,4,opt,name=department_id,json=departmentId,proto3" json:"department_id,omitempty"`    // ID отдела (опционально)
	Problem       string                 `protobuf:"bytes,5,opt,name=problem,proto3" json:"problem,omitempty"`                                   // Описание проблемы (необязательное)
	Solution      string                 `protobuf:"bytes,6,opt,name=solution,proto3" json:"solution,omitempty"`                                 // Решение проблемы (необязательное)
	DirectionId   int32                  `protobuf:"varint,7,opt,name=direction_id,json=directionId,proto3" json:"direction_id,omitempty"`       // ID направления (обязательное)
	ImplementorId int32                  `protobuf:"varint,8,opt,name=implementor_id,json=implementorId,proto3" json:"implementor_id,omitempty"` // ID исполнителя (опционально)
	PriorityId    int32                  `protobuf:"varint,9,opt,name=priority_id,json=priorityId,proto3" json:"priority_id,omitempty"`          // ID приоритета (обязательное)
	Encouragement int32                  `protobuf:"varint,10,opt,name=encouragement,proto3" json:"encouragement,omitempty"`                     // Поощрение (необязательное)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSentenceRequest) Reset() {
	*x = CreateSentenceRequest{}
	mi := &file_sentences_proto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSentenceRequest) ProtoMessage() {}

func (x *CreateSentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSentenceRequest.ProtoReflect.Descriptor instead.
func (*CreateSentenceRequest) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSentenceRequest) GetStatusId() int32 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *CreateSentenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSentenceRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreateSentenceRequest) GetDepartmentId() int32 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

func (x *CreateSentenceRequest) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *CreateSentenceRequest) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *CreateSentenceRequest) GetDirectionId() int32 {
	if x != nil {
		return x.DirectionId
	}
	return 0
}

func (x *CreateSentenceRequest) GetImplementorId() int32 {
	if x != nil {
		return x.ImplementorId
	}
	return 0
}

func (x *CreateSentenceRequest) GetPriorityId() int32 {
	if x != nil {
		return x.PriorityId
	}
	return 0
}

func (x *CreateSentenceRequest) GetEncouragement() int32 {
	if x != nil {
		return x.Encouragement
	}
	return 0
}

type GetSentenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSentenceRequest) Reset() {
	*x = GetSentenceRequest{}
	mi := &file_sentences_proto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSentenceRequest) ProtoMessage() {}

func (x *GetSentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSentenceRequest.ProtoReflect.Descriptor instead.
func (*GetSentenceRequest) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{1}
}

func (x *GetSentenceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateSentenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusId      int32                  `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone         string                 `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	DepartmentId  int32                  `protobuf:"varint,5,opt,name=department_id,json=departmentId,proto3" json:"department_id,omitempty"`
	Problem       string                 `protobuf:"bytes,6,opt,name=problem,proto3" json:"problem,omitempty"`
	Solution      string                 `protobuf:"bytes,7,opt,name=solution,proto3" json:"solution,omitempty"`
	DirectionId   int32                  `protobuf:"varint,8,opt,name=direction_id,json=directionId,proto3" json:"direction_id,omitempty"`
	ImplementorId int32                  `protobuf:"varint,9,opt,name=implementor_id,json=implementorId,proto3" json:"implementor_id,omitempty"`
	PriorityId    int32                  `protobuf:"varint,10,opt,name=priority_id,json=priorityId,proto3" json:"priority_id,omitempty"`
	Encouragement int32                  `protobuf:"varint,11,opt,name=encouragement,proto3" json:"encouragement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSentenceRequest) Reset() {
	*x = UpdateSentenceRequest{}
	mi := &file_sentences_proto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSentenceRequest) ProtoMessage() {}

func (x *UpdateSentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSentenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateSentenceRequest) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSentenceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSentenceRequest) GetStatusId() int32 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *UpdateSentenceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSentenceRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateSentenceRequest) GetDepartmentId() int32 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

func (x *UpdateSentenceRequest) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *UpdateSentenceRequest) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *UpdateSentenceRequest) GetDirectionId() int32 {
	if x != nil {
		return x.DirectionId
	}
	return 0
}

func (x *UpdateSentenceRequest) GetImplementorId() int32 {
	if x != nil {
		return x.ImplementorId
	}
	return 0
}

func (x *UpdateSentenceRequest) GetPriorityId() int32 {
	if x != nil {
		return x.PriorityId
	}
	return 0
}

func (x *UpdateSentenceRequest) GetEncouragement() int32 {
	if x != nil {
		return x.Encouragement
	}
	return 0
}

type SentenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StatusId      int32                  `protobuf:"varint,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone         string                 `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	DepartmentId  int32                  `protobuf:"varint,5,opt,name=department_id,json=departmentId,proto3" json:"department_id,omitempty"`
	Problem       string                 `protobuf:"bytes,6,opt,name=problem,proto3" json:"problem,omitempty"`
	Solution      string                 `protobuf:"bytes,7,opt,name=solution,proto3" json:"solution,omitempty"`
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DirectionId   int32                  `protobuf:"varint,9,opt,name=direction_id,json=directionId,proto3" json:"direction_id,omitempty"`
	ImplementorId int32                  `protobuf:"varint,10,opt,name=implementor_id,json=implementorId,proto3" json:"implementor_id,omitempty"`
	PriorityId    int32                  `protobuf:"varint,11,opt,name=priority_id,json=priorityId,proto3" json:"priority_id,omitempty"`
	Encouragement int32                  `protobuf:"varint,12,opt,name=encouragement,proto3" json:"encouragement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentenceResponse) Reset() {
	*x = SentenceResponse{}
	mi := &file_sentences_proto_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentenceResponse) ProtoMessage() {}

func (x *SentenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentenceResponse.ProtoReflect.Descriptor instead.
func (*SentenceResponse) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{3}
}

func (x *SentenceResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SentenceResponse) GetStatusId() int32 {
	if x != nil {
		return x.StatusId
	}
	return 0
}

func (x *SentenceResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SentenceResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SentenceResponse) GetDepartmentId() int32 {
	if x != nil {
		return x.DepartmentId
	}
	return 0
}

func (x *SentenceResponse) GetProblem() string {
	if x != nil {
		return x.Problem
	}
	return ""
}

func (x *SentenceResponse) GetSolution() string {
	if x != nil {
		return x.Solution
	}
	return ""
}

func (x *SentenceResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *SentenceResponse) GetDirectionId() int32 {
	if x != nil {
		return x.DirectionId
	}
	return 0
}

func (x *SentenceResponse) GetImplementorId() int32 {
	if x != nil {
		return x.ImplementorId
	}
	return 0
}

func (x *SentenceResponse) GetPriorityId() int32 {
	if x != nil {
		return x.PriorityId
	}
	return 0
}

func (x *SentenceResponse) GetEncouragement() int32 {
	if x != nil {
		return x.Encouragement
	}
	return 0
}

type DeleteSentenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSentenceRequest) Reset() {
	*x = DeleteSentenceRequest{}
	mi := &file_sentences_proto_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSentenceRequest) ProtoMessage() {}

func (x *DeleteSentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSentenceRequest.ProtoReflect.Descriptor instead.
func (*DeleteSentenceRequest) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteSentenceRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteSentenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSentenceResponse) Reset() {
	*x = DeleteSentenceResponse{}
	mi := &file_sentences_proto_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSentenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSentenceResponse) ProtoMessage() {}

func (x *DeleteSentenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSentenceResponse.ProtoReflect.Descriptor instead.
func (*DeleteSentenceResponse) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteSentenceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListSentencesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSentencesRequest) Reset() {
	*x = ListSentencesRequest{}
	mi := &file_sentences_proto_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSentencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSentencesRequest) ProtoMessage() {}

func (x *ListSentencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSentencesRequest.ProtoReflect.Descriptor instead.
func (*ListSentencesRequest) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{6}
}

type SentencesListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*SentenceResponse    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SentencesListResponse) Reset() {
	*x = SentencesListResponse{}
	mi := &file_sentences_proto_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentencesListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentencesListResponse) ProtoMessage() {}

func (x *SentencesListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sentences_proto_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentencesListResponse.ProtoReflect.Descriptor instead.
func (*SentencesListResponse) Descriptor() ([]byte, []int) {
	return file_sentences_proto_proto_rawDescGZIP(), []int{7}
}

func (x *SentencesListResponse) GetData() []*SentenceResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_sentences_proto_proto protoreflect.FileDescriptor

var file_sentences_proto_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xca, 0x02, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x75,
	0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xda,
	0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e,
	0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x10,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x72, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xdc, 0x03, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x59, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x70, 0x75, 0x2e, 0x76, 0x31, 0x3b, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sentences_proto_proto_rawDescOnce sync.Once
	file_sentences_proto_proto_rawDescData []byte
)

func file_sentences_proto_proto_rawDescGZIP() []byte {
	file_sentences_proto_proto_rawDescOnce.Do(func() {
		file_sentences_proto_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sentences_proto_proto_rawDesc), len(file_sentences_proto_proto_rawDesc)))
	})
	return file_sentences_proto_proto_rawDescData
}

var file_sentences_proto_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_sentences_proto_proto_goTypes = []any{
	(*CreateSentenceRequest)(nil),  // 0: sentences_provider.CreateSentenceRequest
	(*GetSentenceRequest)(nil),     // 1: sentences_provider.GetSentenceRequest
	(*UpdateSentenceRequest)(nil),  // 2: sentences_provider.UpdateSentenceRequest
	(*SentenceResponse)(nil),       // 3: sentences_provider.SentenceResponse
	(*DeleteSentenceRequest)(nil),  // 4: sentences_provider.DeleteSentenceRequest
	(*DeleteSentenceResponse)(nil), // 5: sentences_provider.DeleteSentenceResponse
	(*ListSentencesRequest)(nil),   // 6: sentences_provider.ListSentencesRequest
	(*SentencesListResponse)(nil),  // 7: sentences_provider.SentencesListResponse
}
var file_sentences_proto_proto_depIdxs = []int32{
	3, // 0: sentences_provider.SentencesListResponse.data:type_name -> sentences_provider.SentenceResponse
	0, // 1: sentences_provider.SentencesProvider.Create:input_type -> sentences_provider.CreateSentenceRequest
	1, // 2: sentences_provider.SentencesProvider.Get:input_type -> sentences_provider.GetSentenceRequest
	2, // 3: sentences_provider.SentencesProvider.Update:input_type -> sentences_provider.UpdateSentenceRequest
	4, // 4: sentences_provider.SentencesProvider.Delete:input_type -> sentences_provider.DeleteSentenceRequest
	6, // 5: sentences_provider.SentencesProvider.List:input_type -> sentences_provider.ListSentencesRequest
	3, // 6: sentences_provider.SentencesProvider.Create:output_type -> sentences_provider.SentenceResponse
	3, // 7: sentences_provider.SentencesProvider.Get:output_type -> sentences_provider.SentenceResponse
	3, // 8: sentences_provider.SentencesProvider.Update:output_type -> sentences_provider.SentenceResponse
	5, // 9: sentences_provider.SentencesProvider.Delete:output_type -> sentences_provider.DeleteSentenceResponse
	7, // 10: sentences_provider.SentencesProvider.List:output_type -> sentences_provider.SentencesListResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_sentences_proto_proto_init() }
func file_sentences_proto_proto_init() {
	if File_sentences_proto_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sentences_proto_proto_rawDesc), len(file_sentences_proto_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sentences_proto_proto_goTypes,
		DependencyIndexes: file_sentences_proto_proto_depIdxs,
		MessageInfos:      file_sentences_proto_proto_msgTypes,
	}.Build()
	File_sentences_proto_proto = out.File
	file_sentences_proto_proto_goTypes = nil
	file_sentences_proto_proto_depIdxs = nil
}
