// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: sentences/proto.proto

package sentences

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SentencesProvider_Create_FullMethodName = "/sentences_provider.SentencesProvider/Create"
	SentencesProvider_Get_FullMethodName    = "/sentences_provider.SentencesProvider/Get"
	SentencesProvider_Update_FullMethodName = "/sentences_provider.SentencesProvider/Update"
	SentencesProvider_Delete_FullMethodName = "/sentences_provider.SentencesProvider/Delete"
	SentencesProvider_List_FullMethodName   = "/sentences_provider.SentencesProvider/List"
)

// SentencesProviderClient is the client API for SentencesProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentencesProviderClient interface {
	Create(ctx context.Context, in *CreateSentenceRequest, opts ...grpc.CallOption) (*SentenceResponse, error)
	Get(ctx context.Context, in *GetSentenceRequest, opts ...grpc.CallOption) (*SentenceResponse, error)
	Update(ctx context.Context, in *UpdateSentenceRequest, opts ...grpc.CallOption) (*SentenceResponse, error)
	Delete(ctx context.Context, in *DeleteSentenceRequest, opts ...grpc.CallOption) (*DeleteSentenceResponse, error)
	List(ctx context.Context, in *ListSentencesRequest, opts ...grpc.CallOption) (*SentencesListResponse, error)
}

type sentencesProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewSentencesProviderClient(cc grpc.ClientConnInterface) SentencesProviderClient {
	return &sentencesProviderClient{cc}
}

func (c *sentencesProviderClient) Create(ctx context.Context, in *CreateSentenceRequest, opts ...grpc.CallOption) (*SentenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentenceResponse)
	err := c.cc.Invoke(ctx, SentencesProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesProviderClient) Get(ctx context.Context, in *GetSentenceRequest, opts ...grpc.CallOption) (*SentenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentenceResponse)
	err := c.cc.Invoke(ctx, SentencesProvider_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesProviderClient) Update(ctx context.Context, in *UpdateSentenceRequest, opts ...grpc.CallOption) (*SentenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentenceResponse)
	err := c.cc.Invoke(ctx, SentencesProvider_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesProviderClient) Delete(ctx context.Context, in *DeleteSentenceRequest, opts ...grpc.CallOption) (*DeleteSentenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSentenceResponse)
	err := c.cc.Invoke(ctx, SentencesProvider_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesProviderClient) List(ctx context.Context, in *ListSentencesRequest, opts ...grpc.CallOption) (*SentencesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentencesListResponse)
	err := c.cc.Invoke(ctx, SentencesProvider_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentencesProviderServer is the server API for SentencesProvider service.
// All implementations must embed UnimplementedSentencesProviderServer
// for forward compatibility.
type SentencesProviderServer interface {
	Create(context.Context, *CreateSentenceRequest) (*SentenceResponse, error)
	Get(context.Context, *GetSentenceRequest) (*SentenceResponse, error)
	Update(context.Context, *UpdateSentenceRequest) (*SentenceResponse, error)
	Delete(context.Context, *DeleteSentenceRequest) (*DeleteSentenceResponse, error)
	List(context.Context, *ListSentencesRequest) (*SentencesListResponse, error)
	mustEmbedUnimplementedSentencesProviderServer()
}

// UnimplementedSentencesProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentencesProviderServer struct{}

func (UnimplementedSentencesProviderServer) Create(context.Context, *CreateSentenceRequest) (*SentenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSentencesProviderServer) Get(context.Context, *GetSentenceRequest) (*SentenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSentencesProviderServer) Update(context.Context, *UpdateSentenceRequest) (*SentenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSentencesProviderServer) Delete(context.Context, *DeleteSentenceRequest) (*DeleteSentenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSentencesProviderServer) List(context.Context, *ListSentencesRequest) (*SentencesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSentencesProviderServer) mustEmbedUnimplementedSentencesProviderServer() {}
func (UnimplementedSentencesProviderServer) testEmbeddedByValue()                           {}

// UnsafeSentencesProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentencesProviderServer will
// result in compilation errors.
type UnsafeSentencesProviderServer interface {
	mustEmbedUnimplementedSentencesProviderServer()
}

func RegisterSentencesProviderServer(s grpc.ServiceRegistrar, srv SentencesProviderServer) {
	// If the following call pancis, it indicates UnimplementedSentencesProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SentencesProvider_ServiceDesc, srv)
}

func _SentencesProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesProviderServer).Create(ctx, req.(*CreateSentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesProvider_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesProviderServer).Get(ctx, req.(*GetSentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesProvider_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesProviderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesProvider_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesProviderServer).Update(ctx, req.(*UpdateSentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesProvider_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesProviderServer).Delete(ctx, req.(*DeleteSentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesProvider_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSentencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesProviderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesProvider_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesProviderServer).List(ctx, req.(*ListSentencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SentencesProvider_ServiceDesc is the grpc.ServiceDesc for SentencesProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentencesProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentences_provider.SentencesProvider",
	HandlerType: (*SentencesProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SentencesProvider_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SentencesProvider_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SentencesProvider_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SentencesProvider_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SentencesProvider_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentences/proto.proto",
}
