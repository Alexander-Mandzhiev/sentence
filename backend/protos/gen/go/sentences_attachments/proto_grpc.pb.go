// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: sentences_attachments/proto.proto

package sentences_attachments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SentencesAttachmentsProvider_Create_FullMethodName           = "/sentences_attachments_provider.SentencesAttachmentsProvider/Create"
	SentencesAttachmentsProvider_Delete_FullMethodName           = "/sentences_attachments_provider.SentencesAttachmentsProvider/Delete"
	SentencesAttachmentsProvider_ListBySentence_FullMethodName   = "/sentences_attachments_provider.SentencesAttachmentsProvider/ListBySentence"
	SentencesAttachmentsProvider_ListByAttachment_FullMethodName = "/sentences_attachments_provider.SentencesAttachmentsProvider/ListByAttachment"
)

// SentencesAttachmentsProviderClient is the client API for SentencesAttachmentsProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentencesAttachmentsProviderClient interface {
	Create(ctx context.Context, in *CreateSentenceAttachmentRequest, opts ...grpc.CallOption) (*SentenceAttachmentResponse, error)
	Delete(ctx context.Context, in *DeleteSentenceAttachmentRequest, opts ...grpc.CallOption) (*DeleteSentenceAttachmentResponse, error)
	ListBySentence(ctx context.Context, in *ListBySentenceRequest, opts ...grpc.CallOption) (*SentenceAttachmentsListResponse, error)
	ListByAttachment(ctx context.Context, in *ListByAttachmentRequest, opts ...grpc.CallOption) (*SentenceAttachmentsListResponse, error)
}

type sentencesAttachmentsProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewSentencesAttachmentsProviderClient(cc grpc.ClientConnInterface) SentencesAttachmentsProviderClient {
	return &sentencesAttachmentsProviderClient{cc}
}

func (c *sentencesAttachmentsProviderClient) Create(ctx context.Context, in *CreateSentenceAttachmentRequest, opts ...grpc.CallOption) (*SentenceAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentenceAttachmentResponse)
	err := c.cc.Invoke(ctx, SentencesAttachmentsProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesAttachmentsProviderClient) Delete(ctx context.Context, in *DeleteSentenceAttachmentRequest, opts ...grpc.CallOption) (*DeleteSentenceAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSentenceAttachmentResponse)
	err := c.cc.Invoke(ctx, SentencesAttachmentsProvider_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesAttachmentsProviderClient) ListBySentence(ctx context.Context, in *ListBySentenceRequest, opts ...grpc.CallOption) (*SentenceAttachmentsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentenceAttachmentsListResponse)
	err := c.cc.Invoke(ctx, SentencesAttachmentsProvider_ListBySentence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentencesAttachmentsProviderClient) ListByAttachment(ctx context.Context, in *ListByAttachmentRequest, opts ...grpc.CallOption) (*SentenceAttachmentsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentenceAttachmentsListResponse)
	err := c.cc.Invoke(ctx, SentencesAttachmentsProvider_ListByAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentencesAttachmentsProviderServer is the server API for SentencesAttachmentsProvider service.
// All implementations must embed UnimplementedSentencesAttachmentsProviderServer
// for forward compatibility.
type SentencesAttachmentsProviderServer interface {
	Create(context.Context, *CreateSentenceAttachmentRequest) (*SentenceAttachmentResponse, error)
	Delete(context.Context, *DeleteSentenceAttachmentRequest) (*DeleteSentenceAttachmentResponse, error)
	ListBySentence(context.Context, *ListBySentenceRequest) (*SentenceAttachmentsListResponse, error)
	ListByAttachment(context.Context, *ListByAttachmentRequest) (*SentenceAttachmentsListResponse, error)
	mustEmbedUnimplementedSentencesAttachmentsProviderServer()
}

// UnimplementedSentencesAttachmentsProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentencesAttachmentsProviderServer struct{}

func (UnimplementedSentencesAttachmentsProviderServer) Create(context.Context, *CreateSentenceAttachmentRequest) (*SentenceAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSentencesAttachmentsProviderServer) Delete(context.Context, *DeleteSentenceAttachmentRequest) (*DeleteSentenceAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSentencesAttachmentsProviderServer) ListBySentence(context.Context, *ListBySentenceRequest) (*SentenceAttachmentsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySentence not implemented")
}
func (UnimplementedSentencesAttachmentsProviderServer) ListByAttachment(context.Context, *ListByAttachmentRequest) (*SentenceAttachmentsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByAttachment not implemented")
}
func (UnimplementedSentencesAttachmentsProviderServer) mustEmbedUnimplementedSentencesAttachmentsProviderServer() {
}
func (UnimplementedSentencesAttachmentsProviderServer) testEmbeddedByValue() {}

// UnsafeSentencesAttachmentsProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentencesAttachmentsProviderServer will
// result in compilation errors.
type UnsafeSentencesAttachmentsProviderServer interface {
	mustEmbedUnimplementedSentencesAttachmentsProviderServer()
}

func RegisterSentencesAttachmentsProviderServer(s grpc.ServiceRegistrar, srv SentencesAttachmentsProviderServer) {
	// If the following call pancis, it indicates UnimplementedSentencesAttachmentsProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SentencesAttachmentsProvider_ServiceDesc, srv)
}

func _SentencesAttachmentsProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSentenceAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesAttachmentsProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesAttachmentsProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesAttachmentsProviderServer).Create(ctx, req.(*CreateSentenceAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesAttachmentsProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSentenceAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesAttachmentsProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesAttachmentsProvider_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesAttachmentsProviderServer).Delete(ctx, req.(*DeleteSentenceAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesAttachmentsProvider_ListBySentence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySentenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesAttachmentsProviderServer).ListBySentence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesAttachmentsProvider_ListBySentence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesAttachmentsProviderServer).ListBySentence(ctx, req.(*ListBySentenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentencesAttachmentsProvider_ListByAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentencesAttachmentsProviderServer).ListByAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentencesAttachmentsProvider_ListByAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentencesAttachmentsProviderServer).ListByAttachment(ctx, req.(*ListByAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SentencesAttachmentsProvider_ServiceDesc is the grpc.ServiceDesc for SentencesAttachmentsProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentencesAttachmentsProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentences_attachments_provider.SentencesAttachmentsProvider",
	HandlerType: (*SentencesAttachmentsProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SentencesAttachmentsProvider_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SentencesAttachmentsProvider_Delete_Handler,
		},
		{
			MethodName: "ListBySentence",
			Handler:    _SentencesAttachmentsProvider_ListBySentence_Handler,
		},
		{
			MethodName: "ListByAttachment",
			Handler:    _SentencesAttachmentsProvider_ListByAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentences_attachments/proto.proto",
}
