// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: attachment_types/proto.proto

package attachment_types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttachmentTypesProvider_Create_FullMethodName = "/attachment_types_provider.AttachmentTypesProvider/Create"
	AttachmentTypesProvider_Get_FullMethodName    = "/attachment_types_provider.AttachmentTypesProvider/Get"
	AttachmentTypesProvider_Update_FullMethodName = "/attachment_types_provider.AttachmentTypesProvider/Update"
	AttachmentTypesProvider_Delete_FullMethodName = "/attachment_types_provider.AttachmentTypesProvider/Delete"
	AttachmentTypesProvider_List_FullMethodName   = "/attachment_types_provider.AttachmentTypesProvider/List"
)

// AttachmentTypesProviderClient is the client API for AttachmentTypesProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentTypesProviderClient interface {
	Create(ctx context.Context, in *CreateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentTypeResponse, error)
	Get(ctx context.Context, in *GetAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentTypeResponse, error)
	Update(ctx context.Context, in *UpdateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentTypeResponse, error)
	Delete(ctx context.Context, in *DeleteAttachmentTypeRequest, opts ...grpc.CallOption) (*DeleteAttachmentTypeResponse, error)
	List(ctx context.Context, in *ListAttachmentTypesRequest, opts ...grpc.CallOption) (*AttachmentTypesListResponse, error)
}

type attachmentTypesProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentTypesProviderClient(cc grpc.ClientConnInterface) AttachmentTypesProviderClient {
	return &attachmentTypesProviderClient{cc}
}

func (c *attachmentTypesProviderClient) Create(ctx context.Context, in *CreateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentTypeResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesProvider_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesProviderClient) Get(ctx context.Context, in *GetAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentTypeResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesProvider_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesProviderClient) Update(ctx context.Context, in *UpdateAttachmentTypeRequest, opts ...grpc.CallOption) (*AttachmentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentTypeResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesProvider_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesProviderClient) Delete(ctx context.Context, in *DeleteAttachmentTypeRequest, opts ...grpc.CallOption) (*DeleteAttachmentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAttachmentTypeResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesProvider_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentTypesProviderClient) List(ctx context.Context, in *ListAttachmentTypesRequest, opts ...grpc.CallOption) (*AttachmentTypesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentTypesListResponse)
	err := c.cc.Invoke(ctx, AttachmentTypesProvider_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentTypesProviderServer is the server API for AttachmentTypesProvider service.
// All implementations must embed UnimplementedAttachmentTypesProviderServer
// for forward compatibility.
type AttachmentTypesProviderServer interface {
	Create(context.Context, *CreateAttachmentTypeRequest) (*AttachmentTypeResponse, error)
	Get(context.Context, *GetAttachmentTypeRequest) (*AttachmentTypeResponse, error)
	Update(context.Context, *UpdateAttachmentTypeRequest) (*AttachmentTypeResponse, error)
	Delete(context.Context, *DeleteAttachmentTypeRequest) (*DeleteAttachmentTypeResponse, error)
	List(context.Context, *ListAttachmentTypesRequest) (*AttachmentTypesListResponse, error)
	mustEmbedUnimplementedAttachmentTypesProviderServer()
}

// UnimplementedAttachmentTypesProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttachmentTypesProviderServer struct{}

func (UnimplementedAttachmentTypesProviderServer) Create(context.Context, *CreateAttachmentTypeRequest) (*AttachmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAttachmentTypesProviderServer) Get(context.Context, *GetAttachmentTypeRequest) (*AttachmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAttachmentTypesProviderServer) Update(context.Context, *UpdateAttachmentTypeRequest) (*AttachmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAttachmentTypesProviderServer) Delete(context.Context, *DeleteAttachmentTypeRequest) (*DeleteAttachmentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAttachmentTypesProviderServer) List(context.Context, *ListAttachmentTypesRequest) (*AttachmentTypesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAttachmentTypesProviderServer) mustEmbedUnimplementedAttachmentTypesProviderServer() {
}
func (UnimplementedAttachmentTypesProviderServer) testEmbeddedByValue() {}

// UnsafeAttachmentTypesProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentTypesProviderServer will
// result in compilation errors.
type UnsafeAttachmentTypesProviderServer interface {
	mustEmbedUnimplementedAttachmentTypesProviderServer()
}

func RegisterAttachmentTypesProviderServer(s grpc.ServiceRegistrar, srv AttachmentTypesProviderServer) {
	// If the following call pancis, it indicates UnimplementedAttachmentTypesProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttachmentTypesProvider_ServiceDesc, srv)
}

func _AttachmentTypesProvider_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesProviderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesProvider_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesProviderServer).Create(ctx, req.(*CreateAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesProvider_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesProviderServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesProvider_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesProviderServer).Get(ctx, req.(*GetAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesProvider_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesProviderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesProvider_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesProviderServer).Update(ctx, req.(*UpdateAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesProvider_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesProviderServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesProvider_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesProviderServer).Delete(ctx, req.(*DeleteAttachmentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentTypesProvider_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentTypesProviderServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttachmentTypesProvider_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentTypesProviderServer).List(ctx, req.(*ListAttachmentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentTypesProvider_ServiceDesc is the grpc.ServiceDesc for AttachmentTypesProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentTypesProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attachment_types_provider.AttachmentTypesProvider",
	HandlerType: (*AttachmentTypesProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AttachmentTypesProvider_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AttachmentTypesProvider_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AttachmentTypesProvider_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttachmentTypesProvider_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AttachmentTypesProvider_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attachment_types/proto.proto",
}
